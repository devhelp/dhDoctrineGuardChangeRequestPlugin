<?php

/**
 * PlugindhChangeRequest
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PlugindhChangeRequest extends BasedhChangeRequest
{

    const FIELD_NAME_PASSWORD = 'password_hash';
    const FIELD_NAME_EMAIL = 'email_address';

    public function setPasswordHash($password)
    {
        $this->setFieldName(self::FIELD_NAME_PASSWORD);
        $this->setNewValue($this->getPasswordHash($password));
    }

    public function setEmailAddress($email_address)
    {
        $this->setFieldName(self::FIELD_NAME_EMAIL);
        $this->setNewValue($email_address);
    }

    protected function getPasswordHash($password)
    {
        if(!$this->getUserId() || $this->getUser()->isNew())
            throw new Exception('You have to set an existing User before generating a password');

        $user = $this->getUser()->copy();

        $user->setPassword($password);

        return $user->getPassword();
    }

    public function updateRequest($days_valid = 7)
    {
        $this->setToken($this->generateUniqueToken());
        $this->setTokenExpire($this->getExpireDate($days_valid));
    }

    protected function generateUniqueToken()
    {
        $algorithm = sfConfig::get('app_dh_change_request_algorithm');
        $salt = sfConfig::get('app_dh_change_request_salt');

        do
        {
            $token = call_user_func($algorithm, ((string) time()) . $salt);
        }
        while(dhChangeRequestTable::getInstance()->findOneByToken($token));

        return $token;
    }

    protected function getExpireDate($days_valid)
    {
        $dt = new DateTime();
        $dt->modify("+$days_valid day");

        return $dt->format('Y-m-d H:i:s');
    }

    public function isRequestValid()
    {
        $current = new DateTime();
        $token_expire = $this->getDateTimeObject('token_expire');

        return $current->getTimestamp() > $token_expire->getTimestamp();
    }

    public function confirm()
    {
        if(!$this->getFieldName() || !$this->getNewValue())
            throw new sfException('There is nothing to confirm');

        $this->updateUser();

        $this->delete();
    }

    protected function updateUser()
    {
        $user = $this->getUser();
        $user->set($this->getFieldName(), $this->getNewValue());
        $user->save();
    }

    /**
     *
     * @param sfGuardUser $user
     * @param type $field_name
     * @return dhChangeRequest
     */
    static public function getChangeRequest(sfGuardUser $user, $field_name)
    {
        $change_requests = $user->getChangeRequests();

        foreach($change_requests as $change_request) /* @var $change_request dhChangeRequest */
        {
            if($change_request->getFieldName() === $field_name)
            {
                return $change_request;
            }
        }

        //if(!$change_request) 
        $change_request = $change_requests->get($field_name);
        $change_request->setUser($user);

        return $change_request;
    }

}

